{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","state","todo","id","Math","random","toString","substr","name","text","addText","_this","push","setState","remove","selectionData","filter","a","_this2","this","react_default","createElement","Container","Row","style","textAlign","Form","inline","FormGroup","Input","marginRight","value","onChange","target","placeholder","Button","onClick","marginTop","ListGroup","map","ListGroupItem","paddingRight","color","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0356ee05.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Input,\r\n  Button,\r\n  FormGroup,\r\n  Form,\r\n  ListGroup,\r\n  ListGroupItem\r\n} from \"reactstrap\";\r\n\r\nclass App extends Component {\r\n  componentDidUpdate() {}\r\n\r\n  state = {\r\n    todo: [\r\n      {\r\n        id: Math.random()\r\n          .toString(36)\r\n          .substr(2, 9),\r\n        name: \"test\"\r\n      }\r\n    ],\r\n    text: \"\"\r\n  };\r\n  addText = () => {\r\n    if (this.state.text)\r\n      this.state.todo.push({\r\n        name: this.state.text,\r\n        id: Math.random()\r\n          .toString(36)\r\n          .substr(2, 9)\r\n      });\r\n\r\n    this.setState({\r\n      todo: this.state.todo,\r\n      text: \"\"\r\n    });\r\n  };\r\n\r\n  remove = selectionData => {\r\n    this.setState({\r\n      todo: this.state.todo.filter(a => a.id !== selectionData.id)\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <h1 style={{ textAlign: \"center\" }}>PWA Todo List</h1>\r\n        </Row>\r\n        <Row>\r\n          <Form inline>\r\n            <FormGroup>\r\n              <Input\r\n                style={{ marginRight: 5 }}\r\n                value={this.state.text}\r\n                onChange={value =>\r\n                  this.setState({\r\n                    text: value.target.value\r\n                  })\r\n                }\r\n                placeholder=\"AnlamlÄ± Placeholder\"\r\n              />\r\n            </FormGroup>\r\n            <Button onClick={this.addText}>Ekle</Button>\r\n          </Form>\r\n        </Row>\r\n        <Row style={{ marginTop: \"25px\" }}>\r\n          <ListGroup>\r\n            {this.state.todo.map(selectionData => {\r\n              return (\r\n                <ListGroupItem\r\n                  onClick={() => this.remove(selectionData)}\r\n                  style={{ paddingRight: \"120px\", color: \"red\" }}\r\n                >\r\n                  {selectionData.name}\r\n                </ListGroupItem>\r\n              );\r\n            })}\r\n          </ListGroup>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}